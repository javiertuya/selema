package giis.selema.portable;

import java.io.IOException;
import java.util.Enumeration;

import org.apache.log4j.Appender;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.FileAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;

/**
 * Configuracion de logs de las sesiones web para SeleniumManager
 */
public class LogConfigurator {
	public void configure(String loggerName, String logFile) {
		try { 
			Logger thisLogger=Logger.getLogger(loggerName);
			//Configura logger especifico con este nombre y un appender al fichero que contendra el report del test
			thisLogger.setLevel(Level.INFO);
			//log de fichero, el layout contiene br pues el fichero sera html para poder ver links a videos e imagenes
			if (findAppender(loggerName, true)==null) {
				PatternLayout layout = new PatternLayout("<br/><span style=\"font-family:monospace;\">[%-5p] %d{HH:mm:ss} %c - %m</span>%n");
				Appender appender = new FileAppender(layout, logFile);
				appender.setName(loggerName);
				thisLogger.addAppender(appender);
			}
			thisLogger.info(loggerName + " logger created writing to file "+logFile);
		} catch (IOException e) {
			throw new SelemaException("Can't configure logging",e);
		}
	}
	private Appender findAppender(String loggerName, boolean findFile) {
		Enumeration<?> appenders = Logger.getLogger(loggerName).getAllAppenders();
		if (appenders != null)
			while (appenders.hasMoreElements()) {
				Appender appender = (Appender) appenders.nextElement();
				if (appender != null && loggerName.equals(appender.getName()) &&
						(appender instanceof FileAppender && findFile 
								|| appender instanceof ConsoleAppender && !findFile)
						)
					return appender;
			}
		return null;
	}
}
