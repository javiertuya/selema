<project name="Selema" default="build" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless" xmlns:dn="antlib:org.apache.ant.dotnet" xmlns="antlib:org.apache.tools.ant">

	<description>Version C# de Selema</description>
  <!--Uses java for sharpen if this property specifies the location of a java7 executable, if not, uses containers -->
  <property environment="env"/>
  <property name="java7.exec" value="C:/Program Files/Java/jdk1.7.0_75/bin/java" unless:set="env.GITHUB_WORKSPACE" />

  <target name="clean" description="limpia archivos temporales y generados">
    <delete dir="Selema/bin"/>
    <delete dir="Selema/obj"/>
    <delete dir="Selema/nupkg"/>
    <delete dir="SelemaTest/bin"/>
    <delete dir="SelemaTest/obj"/>
    <delete dir="SelemaTest/TestResults"/>
    <delete dir="packages"/>
    <delete dir="reports"/>
    <delete dir="sharpen-temp"/>
    <delete dir="Sharpen-Project/src/target/classes"/>
    <delete dir="Sharpen-Project/src/target/testcases"/>
    <delete dir="Sharpen-Project/src/target/surefire-reports"/>
  </target>

	<target name="build" >
    <exec executable="dotnet" failonerror="true" >
      <arg value="build" />
    </exec>
	</target>

  <target name="test" >
    <exec executable="dotnet" failonerror="true" >
      <arg value="test" />
      <arg value="--logger" />
      <arg value="console" />
      <arg value="--logger" />
      <arg value="trx;LogFileName=../../reports/test-result.trx" />
    </exec>
  </target>

  <target name="report.split" description="Convert mstest to junit reports">
       <exec executable="dotnet" >
        <arg value="tool" />
        <arg value="install" />
        <arg value="--no-cache" />
        <arg value="--tool-path" />
        <arg value="packages/dotnet-tools" />
        <arg value="DotnetTestSplit" />
      </exec>
      <property name="DotnetTestSplit.exe" value="packages/dotnet-tools/DotnetTestSplit.exe" if:set="isWindows" />
      <property name="DotnetTestSplit.exe" location="packages/dotnet-tools/DotnetTestSplit" unless:set="isWindows" />
      <exec executable="${DotnetTestSplit.exe}" failonerror="true">
        <arg value="reports/test-result.trx" />
        <arg value="reports/surefire-reports" />
      </exec>
  </target>
  <target name="report" description="JUnit html format report generation">
      <junitreport todir="reports">
        <fileset dir="reports/surefire-reports">
          <include name="TEST-*.xml" />
        </fileset>
        <report format="frames" todir="reports/junit" />
        <report format="noframes" todir="reports/junit-noframes" />
      </junitreport>
  </target>

  <target name="sharpen" description="Traduce el codigo fuente de Selema de Java a C#"
          depends="sharpen.preprocess, sharpen.sharpen, sharpen.postprocess ">
    <!--
      Three stages (each is run as a target):
      - copy java files to a sharpen-temp/java directory and gets dependencies
      - perform the sharpen translation
      - final changes in translated files (in temporary folder) and copy to the solution
    -->
  </target>

  <target name="sharpen.preprocess">
    <!--copia los fuentes a la carpeta temporal donde se traduciran y postprocesaran-->
    <copy todir="sharpen-temp/java">
      <fileset dir="../java/src/main/java" >
        <exclude name="**/framework/junit5/**" />
      </fileset>
      <fileset dir="../java/src/test/java" >
        <exclude name="**/*junit5/**" />
        <exclude name="**/TestDriverPlatformDependent.*" />
      </fileset>
    </copy>
    <mkdir dir="sharpen-temp/lib" />

    <!-- Other libraries to resolve depenencies when executing sharpen (delcared in sharpen-all-options.txt) -->
    <sequential>
      <get src="https://repo1.maven.org/maven2/junit/junit/4.13/junit-4.13.jar" dest="sharpen-temp/lib/junit-4.13.jar" usetimestamp="true" />
      <get src="https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.32/slf4j-api-1.7.32.jar" dest="sharpen-temp/lib/slf4j-api-1.7.32.jar" usetimestamp="true" />
      <get src="https://repo1.maven.org/maven2/commons-io/commons-io/2.6/commons-io-2.6.jar" dest="sharpen-temp/lib/commons-io-2.6.jar" usetimestamp="true" />
      <get src="https://repo1.maven.org/maven2/org/bitbucket/cowwoc/diff-match-patch/1.2/diff-match-patch-1.2.jar" dest="sharpen-temp/lib/diff-match-patch-1.2.jar" usetimestamp="true" />
      <get src="https://repo1.maven.org/maven2/io/github/javiertuya/portable-java/2.1.2/portable-java-2.1.2.jar" dest="sharpen-temp/lib/portable-java-2.1.2.jar" usetimestamp="true" />
      <get src="https://repo1.maven.org/maven2/io/github/javiertuya/visual-assert/2.2.1/visual-assert-2.2.1.jar" dest="sharpen-temp/lib/visual-assert-2.2.1.jar" usetimestamp="true" />
      <property name="selenium-url" value="https://repo1.maven.org/maven2/org/seleniumhq/selenium" />
      <get src="${selenium-url}/selenium-api/3.141.59/selenium-api-3.141.59.jar" dest="sharpen-temp/lib/selenium-api-3.141.59.jar" usetimestamp="true" />
      <get src="${selenium-url}/selenium-remote-driver/3.141.59/selenium-remote-driver-3.141.59.jar" dest="sharpen-temp/lib/selenium-remote-driver-3.141.59.jar" usetimestamp="true" />
      <get src="${selenium-url}/selenium-support/3.141.59/selenium-support-3.141.59.jar" dest="sharpen-temp/lib/selenium-support-3.141.59.jar" usetimestamp="true" />
    </sequential>

    <!--Dificiles de mapear las clases de Selenium, crea un stub, habra implementaciones en cada plataforma-->
    <echo file="sharpen-temp/java/giis/selema/portable/selenium/SeleniumObjects.java">
      package giis.selema.portable.selenium;
      import java.util.Map;
      public class SeleniumObjects {
      public Object getOptionsObj(String browser, String[] arguments) { return null; }
      public void setCapability(Object opt, String key, Object value) { }
      public void addArguments(Object opt, String[] args) { }
      public Object getDriverObj(String browser, Object opt) { return null; }
      public Object getRemoteDriverObj(String remoteUrl, Object opt) { return null; }
      public void downloadDriverExecutable(String browser, String version) { }
      }
    </echo>
    <echo file="sharpen-temp/java/giis/selema/portable/selenium/SeleniumActions.java">
      package giis.selema.portable.selenium;
      import org.openqa.selenium.WebDriver;
      import org.openqa.selenium.WebElement;
      import org.openqa.selenium.By;
      public class SeleniumActions {
      public static void takeScreenshotToFile(WebDriver driver, String fileName) { }
      public static void clickActions(WebDriver driver, WebElement elem) { }
      public static void clickJavascript(WebDriver driver, WebElement elem) { }
      public static void sendKeysActions(WebDriver driver, WebElement elem, String value) { }
      public static void sendKeysJavascript(WebDriver driver, WebElement elem, String value) { }
      public static String executeScript(WebDriver driver, String script) { return ""; }
      public static String executeScript(WebDriver driver, String script, WebElement elem) { return ""; }
      public static String executeScript(WebDriver driver, String script, WebElement elem, String value) { return ""; }
      public static void setInnerHtml(WebDriver driver, String id, String value) { }
      public static void setInnerText(WebDriver driver, String id, String value) { }
      public static WebElement findBy(WebDriver driver, By locator) { return (WebElement)null; }
      public static WebElement findById(WebDriver driver, String id) { return (WebElement)null; }
      public static void waitUntilTextPresent(WebDriver seleniumDriver, WebElement elem, String expected) { }
      public static String manageAlert(WebDriver driver, boolean accept, boolean dismiss, String text, boolean waitForClosedAlert) { return ""; }
      public static String manageAlert(WebDriver driver, boolean accept, boolean dismiss, String text, boolean waitForClosedAlert, int waitTime) { return ""; }
      }
    </echo>
  </target>

  <target name="sharpen.sharpen">
    <sharpen.run.java7 if:set="java7.exec" />
    <sharpen.run.container unless:set="java7.exec" />
  </target>

  <macrodef name="sharpen.run.container" description="Run sharpen from a container" >
    <sequential>
      <exec executable="docker" failonerror="true" >
        <arg value="build" />
        <arg value="-t" />
        <arg value="sharpen" />
        <arg value="./sharpen-docker" />
      </exec>
      <echo>${basedir}</echo>
      <exec executable="docker" failonerror="true" >
        <arg value="run" />
        <arg value="-v" />
        <arg value="${basedir}:/sharpen/workdir" />
        <arg value="sharpen" />
        <arg value="." />
        <arg value="sharpen-temp/java" />
        <arg value="@sharpen-all-options.txt" />
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="sharpen.run.java7" description="Run sharpen with local java7 installation" >
    <sequential>
      <get src="https://github.com/javiertuya/sharpen/releases/download/v1.0.1-fork/sharpencore-0.0.1-SNAPSHOT.jar" 
           dest="sharpen-temp/lib/sharpencore-0.0.1-SNAPSHOT.jar" usetimestamp="true" />
      <exec executable="${java7.exec}" failonerror="true" >
        <arg value="-jar" />
        <arg value="sharpen-temp/lib/sharpencore-0.0.1-SNAPSHOT.jar" />
        <arg value="sharpen-temp/java" />
        <arg value="@sharpen-all-options.txt" />
      </exec>
    </sequential>
  </macrodef>
  
  <target name="sharpen.postprocess">
    <!--remplazos globales en el core y tests-->
    <replace dir="sharpen-temp/sharpen-temp.net/">
      <!--<replacefilter token="Logger.GetLogger(this.GetType())" value="LogManager.GetCurrentClassLogger()" />-->
      <replacefilter token="//NOSONAR" value="//" />
      <replacefilter token=".GetType().GetCanonicalName()" value=".GetType().FullName" />
      <replacefilter token="LogManager.GetLogger(this.GetType())" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="LogManager.GetLogger(typeof(LogFactory))" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="DiffMatchPatch" value="diff_match_patch" />
      <replacefilter token="LinkedList&lt;diff_match_patch.Diff&gt;" value="List&lt;Diff&gt;" />
      <replacefilter token="DiffMain" value="diff_main" />
      <replacefilter token="DiffCleanupSemantic" value="diff_cleanupSemantic" />
      <replacefilter token="DiffPrettyHtml" value="diff_prettyHtml" />
      <replacefilter token="Org.Bitbucket.Cowwoc.Diffmatchpatch" value="Giis.Visualassert.DiffMatchPatch" />
      <replacefilter token="wait.WithMessage(" value="wait.Message=(" />
      <replacefilter token=".Manage().Window().Maximize()" value=".Manage().Window.Maximize()" />
    </replace>
    <!--remplazos globales en los tests (de junit4 a nunit3)-->
    <replace dir="sharpen-temp/sharpen-temp.net/">
      <include name="Test4giis*/**" />
      <replacefilter token="public class TestDriverVersion" value=" [Ignore(&quot;Manual Test&quot;)] public class TestDriverVersion" />
      <replacefilter token="LogManager.GetLogger(this.GetType())" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="LogManager.GetLogger(typeof(LogFactory))" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="LogManager.GetLogger(typeof(TestExceptions))" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="LogManager.GetLogger(typeof(TestLifecycle4))" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="LogManager.GetLogger(typeof(TestLifecycle4ClassManaged))" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="LogManager.GetLogger(typeof(TestLifecycle4Unmanaged))" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="LogManager.GetLogger(typeof(TestLifecycle4Repeated))" value="LogManager.GetCurrentClassLogger()" />
      <replacefilter token="Junit4" value="Nunit3" />
      <replacefilter token="[Rule]" value="" />
      <replacefilter token="[ClassRule]" value="" />
      <replacefilter token="public static LifecycleNunit3Class" value="//public LifecycleNunit3Class" />
      <replacefilter token="public LifecycleNunit3Test" value="//public LifecycleNunit3Test" />
      <replacefilter token="LifecycleNunit3Class." value="LifecycleNunit3." />
      <replacefilter token="public RepeatedTestRule" value="//public RepeatedTestRule" />
      <replacefilter token="protected internal static SeleManager" value="protected internal SeleManager" />
      <replacefilter token="public class TestLifecycle4" value="[LifecycleNunit3] public class TestLifecycle4" />
      <replacefilter token="public class TestActions" value="[LifecycleNunit3] public class TestActions" />
      <replacefilter token="public class TestExceptions" value="[LifecycleNunit3] public class TestExceptions" />
      <replacefilter token="public virtual void TestRepeated()" value="[Retry(3)] public virtual void TestRepeated()" />
      <replacefilter token="[LifecycleNunit3] public class TestLifecycle4Inherited" value="public class TestLifecycle4Inherited" />
    </replace>

    <!-- Copia a los proyectos .net -->
    <copy todir="Selema/Translated">
      <fileset dir="sharpen-temp/sharpen-temp.net">
        <exclude name="Giis.Selema.Portable/**" />
        <exclude name="Giis.Selema.Portable.Selenium/Selenium*.*" />
        <exclude name="Giis.Selema.Framework.*/**" />
        <exclude name="Test4giis.Selema.*/**" />
      </fileset>
      <filterchain>
        <concatfilter prepend="sharpen-autogenerated-note.txt"/>
      </filterchain>
    </copy>
    <copy todir="SelemaTest/Translated">
      <fileset dir="sharpen-temp/sharpen-temp.net">
        <include name="Test4giis.Selema*/**/*" />
      </fileset>
      <filterchain>
        <concatfilter prepend="sharpen-autogenerated-note.txt"/>
      </filterchain>
    </copy>
    <move file="SelemaTest/Translated/Test4giis.Selema.Junit4" tofile="SelemaTest/Translated/Test4giis.Selema.Nunit3"/>

    <!--Para mstest copia los tests ya generados de nunit3 a mstest y realiza los remplazos necesarios-->
    <copy todir="SelemaTest/Translated/Test4giis.Selema.Mstest2">
      <fileset dir="SelemaTest/Translated/Test4giis.Selema.Nunit3">
        <include name="**/*" />
      </fileset>
    </copy>
    <replace dir="SelemaTest/Translated/Test4giis.Selema.Mstest2">
      <include name="**/*" />
      <replacefilter token="public class Test" value="[TestClass] public class Test" />
      <replacefilter token="[Test]" value="[TestMethod]" />
      <replacefilter token="[OneTimeSetUp]" value="[ClassInitialize]" />
      <replacefilter token="[OneTimeTearDown]" value="[ClassCleanup]" />
      <replacefilter token="[NUnit.Framework.SetUp]" value="[TestInitialize]" />
      <replacefilter token="[NUnit.Framework.TearDown]" value="[TestCleanup]" />
      <replacefilter token="public static void SetUpClass()" value="public static void SetUpClass(TestContext TestContext)" />
      <replacefilter token=".SetUpClass()" value=".SetUpClass(TestContext)" />
      <replacefilter token="NUnit.Framework" value="Microsoft.VisualStudio.TestTools.UnitTesting" />
      <replacefilter token="Nunit3" value="Mstest2" />
      <replacefilter token="[LifecycleMstest2] " value="" />
      <replacefilter token=": IAfterEachCallback" value=": LifecycleMstest2" />
      <replacefilter>
        <replacetoken>public virtual void RunAfterCallback(string testName, bool success)</replacetoken>
        <replacevalue>
          <![CDATA[[ClassCleanup(ClassCleanupBehavior.EndOfClass)]
		public static new void TearDownClass() {
    
			LifecycleMstest2.TearDownClass();
		}
        public override void RunAfterCallback(string testName, bool success)]]>
        </replacevalue>
      </replacefilter>
    </replace>

    <replace dir="SelemaTest/Translated/Test4giis.Selema.Mstest2">
      <exclude name="**/TestLifecycle4WithoutManager.cs" />
      <replacefilter>
        <replacetoken>protected internal SeleManager</replacetoken>
        <replacevalue>
          <![CDATA[protected internal static SeleManager sm;
		public CLASS_CONSTRUCTOR() {
        ]]>
        </replacevalue>
      </replacefilter>
      <replacefilter token="new SeleManager()" value="LifecycleMstest2.GetManager(sm)" />
      <replacefilter token="new SeleManager(Config4test.GetConfig())" value="LifecycleMstest2.GetManager(sm,Config4test.GetConfig())" />
      <replacefilter token="//public LifecycleMstest2Class" value="} //public LifecycleMstest2Class" />
    </replace>
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4ClassManaged.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4ClassManaged" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Unmanaged.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4Unmanaged" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Inherited.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4Inherited" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4Repeated" />

    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="Retry(" value="RetryTestMethod(" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="[TestMethod]" value="" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="sm.Driver.Url" value="base.SetUp(); sm.Driver.Url" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="public virtual void SetUp()" value="public override void SetUp()" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Inherited.cs" token="[TestClass]" value="[Microsoft.VisualStudio.TestTools.UnitTesting.TestClass]" />

  </target>

</project>