<project name="Selema" default="build" basedir="." xmlns:if="ant:if" xmlns:unless="ant:unless" xmlns:dn="antlib:org.apache.ant.dotnet" xmlns="antlib:org.apache.tools.ant">

  <description>Conversion from Java to C# using JavaToCSharp</description>
  
  <!-- To prepare and publish to the GitHub package repository see build-nuget-prepare.sh in javiertuya/portable repo -->

  <macrodef name="runConvert" description="Execute the JavaToCSharp converter">
    <attribute name="input" />
    <attribute name="output" />
    <attribute name="mapping" default="" />
    <sequential>
      <delete>
        <fileset dir="@{output}" includes="*.cs" />
      </delete>
      <echo>Converting '@{input}' to '@{output}' - Mapping file: '@{mapping}'</echo>
      <!--<exec executable="JavaToCSharp-temp/JavaToCSharpCli/bin/Debug/net8.0/JavaToCSharpCli" failonerror="true">-->
      <exec executable="JavaToCSharpCli" failonerror="true">
        <arg value="--include-subdirectories" />
        <arg value="false" />
        <arg value="--start-interface-names-with-i" />
        <arg value="false" />
        <arg value="--add-using" />
        <arg value="converted.placeholder" />
        <arg value="--mappings-file" unless:blank="mapping" />
        <arg value="@{mapping}" unless:blank="mapping" />
        <arg value="dir" />
        <arg value="@{input}" />
        <arg value="@{output}" />
      </exec>
    </sequential>
  </macrodef>

  <target name="convert">
    <!-- Basic conversion and postprocessing of sources and tests (junit4 into nunit3) -->
    <runConvert input="../java/src/main/java/giis/selema/manager" output="Selema/Translated/Giis.Selema.Manager"  mapping="java-mapping.yml" />
    <runConvert input="../java/src/main/java/giis/selema/services" output="Selema/Translated/Giis.Selema.Services"  mapping="java-mapping.yml" />
    <runConvert input="../java/src/main/java/giis/selema/services/impl" output="Selema/Translated/Giis.Selema.Services.Impl"  mapping="java-mapping.yml" />
    <runConvert input="../java/src/main/java/giis/selema/services/browser" output="Selema/Translated/Giis.Selema.Services.Browser"  mapping="java-mapping.yml" />
    <runConvert input="../java/src/test/java/test4giis/selema/core" output="SelemaTest/Translated/Test4giis.Selema.Core"  mapping="java-mapping.yml" />
    <runConvert input="../java/src/test/java/test4giis/selema/video" output="SelemaTest/Translated/Test4giis.Selema.Video"  mapping="java-mapping.yml" />
    <runConvert input="../java/src/test/java/test4giis/selema/junit4" output="SelemaTest/Translated/Test4giis.Selema.Nunit3"  mapping="java-mapping.yml" />
    <delete file="SelemaTest/Translated/Test4giis.Selema.Core/TestDriverPlatformDependent.cs" />

    <replace dir="." >
      <include name="Selema/Translated/Giis.Selema.Manager/*.cs" />
      <include name="Selema/Translated/Giis.Selema.Services/*.cs" />
      <include name="Selema/Translated/Giis.Selema.Services.Impl/*.cs" />
      <include name="Selema/Translated/Giis.Selema.Services.Browser/*.cs" />
      <include name="SelemaTest/Translated/Test4giis.Selema.Video/*.cs" />
      <include name="SelemaTest/Translated/Test4giis.Selema.Core/*.cs" />
      <include name="SelemaTest/Translated/Test4giis.Selema.Nunit3/*.cs" />
      <replacefilter token="Dictionary&lt;" value="Map&lt;" />
      <replacefilter token="private static readonly long serialVersionUID" value="//private static readonly long serialVersionUID" />
      <replacefilter token="public class TestDriverVersion" value=" [Ignore(&quot;Manual test to avoid side effects with tests executed after this&quot;)] public class TestDriverVersion" />
      <replacefilter token="LoggerFactory" value="LogManager" />
      <replacefilter token="LogManager.GetLogger(this.GetType());" value="LogManager.GetCurrentClassLogger();" />
      <replacefilter token="LogManager.GetLogger(typeof(" value="LogManager.GetCurrentClassLogger(); //" />
      <replacefilter token="log.Error(" value="Giis.Portable.Util.NLogUtil.Error(log, " />
      <replacefilter token="log.Warn(" value="Giis.Portable.Util.NLogUtil.Warn(log, " />
      <replacefilter token="Throwable" value="Exception" />
      <replacefilter token="InvocationTargetException" value="TargetInvocationException" />
      <replacefilter token="((TargetInvocationException)e).GetTargetException().GetMessage()" value="((TargetInvocationException)e).InnerException.Message" />
      <replacefilter token="e.GetMessage()" value="e.Message" />
      <replacefilter token=".GetType().GetName()" value=".GetType().FullName" />
      <replacefilter token=".GetType().GetSimpleName()" value=".GetType().Name" />
      <replacefilter token=".GetType().GetCanonicalName()" value=".GetType().FullName" />
      <replacefilter token="String.ValueOf(" value="(" />
      <replacefilter token="System.@out.Println" value="System.Console.WriteLine" />

      <replacefilter token="public virtual WebDriver Driver()" value="public WebDriver Driver { get { return this.GetDriver(); } }  public virtual WebDriver DriverJavaOnly()" />
      <replacefilter token=".Driver()" value=".Driver" />
      <replacefilter token="WebDriver" value="IWebDriver" />
      <replacefilter token="WebElement" value="IWebElement" />
      <replacefilter token="RemoteIWebDriver" value="RemoteWebDriver" />
      <replacefilter token="((RemoteWebDriver)driver).GetSessionId()" value="((RemoteWebDriver)driver).SessionId" />
      <replacefilter token="Capabilities" value="DriverOptions" />
      <replacefilter token=".Window().Maximize()" value=".Window.Maximize()" />
      <replacefilter token=".GetText()" value=".Text" />
      <replacefilter token="[Ignore]" value="[Ignore(&quot;Manual test&quot;)]" />
      <!-- nunit requires the exact exception in assert throws, allows derived types -->
      <replacefilter token="Assert.Throws(typeof(Exception)" value="Assert.Throws(Is.InstanceOf(typeof(Exception))" />
      <replacefilter token="Assert.Throws(typeof(InvalidOperationException)" value="Assert.Throws(Is.InstanceOf(typeof(Exception))" />

      <replacefilter token="public TestName testName = new TestName();" value="" />
      <replacefilter token="testName.GetMethodName()" value="NUnit.Framework.TestContext.CurrentContext.Test.Name" />
      <replacefilter token="using Org.Junit.Rules;" value="" />

      <!--todo uppercase when new version of portable-->
      <replacefilter token="Parameters.DEFAULT_PROJECT_ROOT" value="Parameters.DefaultProjectRoot" />
      <replacefilter token="Parameters.DEFAULT_REPORT_SUBDIR" value="Parameters.DefaultReportSubdir" />

      <replacefilter token="using converted.placeholder;" value="/////// THIS FILE HAS BEEN AUTOMATICALLY CONVERTED FROM THE JAVA SOURCES. DO NOT EDIT ///////" />
    </replace>
    <replace file="Selema/Translated/Giis.Selema.Manager/SeleniumDriverFactory.cs" token="IWebDriver" value="WebDriver" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Core/LogReader.cs" token="throw (e)" value="throw" />

    <!-- 
    Core and Junit4 test has been mostly converted into NUnit3,
    but additional transformations must be made to adapt the particularities of selema,
    e.g. add the LifecycleNunit3 and remove the LifecycleJunit4 rules
    -->

    <replace dir="." >
      <include name="SelemaTest/Translated/Test4giis.Selema.Core/*.cs" />
      <include name="SelemaTest/Translated/Test4giis.Selema.Video/*.cs" />
      <include name="SelemaTest/Translated/Test4giis.Selema.Nunit3/*.cs" />
      <replacefilter token="By.Id(" value="OpenQA.Selenium.By.Id(" />
      
      <replacefilter token="public static LifecycleJunit4Class" value="//public static LifecycleJunit4Class" />
      <replacefilter token="public LifecycleJunit4Test" value="//public LifecycleJunit4Test" />
      <replacefilter token="public RepeatedTestRule" value="//public RepeatedTestRule" />
      <replacefilter token="protected internal static SeleManager" value="protected internal SeleManager" />
      <replacefilter token="protected static SeleManager" value="protected internal SeleManager" />
      <replacefilter token="public class TestLifecycle4" value="[LifecycleNunit3] public class TestLifecycle4" />
      <replacefilter token="public class TestActions" value="[LifecycleNunit3] public class TestActions" />
      <replacefilter token="public class TestExceptions" value="[LifecycleNunit3] public class TestExceptions" />
      <replacefilter token="public virtual void TestRepeated()" value="[Retry(3)] public virtual void TestRepeated()" />
      <replacefilter token="namespace Test4giis.Selema.Junit4" value="namespace Test4giis.Selema.Nunit3" />
      <replacefilter token="using Giis.Selema.Framework.Junit4;" value="" />
      <replacefilter token="[LifecycleNunit3] public class TestLifecycle4Inherited" value="public class TestLifecycle4Inherited" />
    </replace>

    <!--
    MSTest2 tests are copied from the already converted NUnit3 tests, 
    but need to be adapted both to selema and mstest
    -->
    <copy todir="SelemaTest/Translated/Test4giis.Selema.Mstest2">
      <fileset dir="SelemaTest/Translated/Test4giis.Selema.Nunit3">
        <include name="**/*" />
      </fileset>
    </copy>
    <replace dir="SelemaTest/Translated/Test4giis.Selema.Mstest2">
      <include name="**/*" />
      <replacefilter token="public class Test" value="[TestClass] public class Test" />
      <replacefilter token="[Test]" value="[TestMethod]" />
      <replacefilter token="[NUnit.Framework.OneTimeSetUp]" value="[ClassInitialize]" />
      <replacefilter token="[NUnit.Framework.OneTimeTearDown]" value="[ClassCleanup]" />
      <replacefilter token="[OneTimeSetUp]" value="[ClassInitialize]" />
      <replacefilter token="[OneTimeTearDown]" value="[ClassCleanup]" />
      <replacefilter token="[NUnit.Framework.SetUp]" value="[TestInitialize]" />
      <replacefilter token="[NUnit.Framework.TearDown]" value="[TestCleanup]" />
      <replacefilter token="public static void SetUpClass()" value="public static void SetUpClass(TestContext TestContext)" />
      <replacefilter token=".SetUpClass()" value=".SetUpClass(TestContext)" />
      <replacefilter token="NUnit.Framework.Legacy.ClassicAssert" value="Microsoft.VisualStudio.TestTools.UnitTesting.Assert" />
      <replacefilter token="NUnit.Framework" value="Microsoft.VisualStudio.TestTools.UnitTesting" />
      <replacefilter token="Nunit3" value="Mstest2" />
      <replacefilter token="[LifecycleMstest2] " value="" />
      <replacefilter token=": IAfterEachCallback" value=": LifecycleMstest2" />
      <replacefilter>
        <replacetoken>public virtual void RunAfterCallback(string testName, bool success)</replacetoken>
        <replacevalue>
          <![CDATA[[ClassCleanup()]
#pragma warning disable MSTEST0036 // Do not use shadowing
		      public static new void TearDownClass() { 
            LifecycleMstest2.TearDownClass(); 
          }
#pragma warning restore MSTEST0036 // Do not use shadowing
          public override void RunAfterCallback(string testName, bool success)]]>
        </replacevalue>
      </replacefilter>
    </replace>

    <replace dir="SelemaTest/Translated/Test4giis.Selema.Mstest2">
      <exclude name="**/TestLifecycle4WithoutManager.cs" />
      <replacefilter>
        <replacetoken>protected internal SeleManager</replacetoken>
        <replacevalue>
          <![CDATA[protected internal static SeleManager sm;
		      public CLASS_CONSTRUCTOR() {
          ]]>
        </replacevalue>
      </replacefilter>
      <replacefilter token="[ClassCleanup(" value="} [ClassCleanup(" />
      <replacefilter token="new SeleManager()" value="LifecycleMstest2.GetManager(sm)" />
      <replacefilter token="new SeleManager(Config4test.GetConfig())" value="LifecycleMstest2.GetManager(sm,Config4test.GetConfig())" />
    </replace>
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4ClassManaged.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4ClassManaged" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Unmanaged.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4Unmanaged" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Inherited.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4Inherited" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="CLASS_CONSTRUCTOR" value="TestLifecycle4Repeated" />

    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Inherited.cs" token="[TestClass]" value="[Microsoft.VisualStudio.TestTools.UnitTesting.TestClass]" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="Retry(" value="RetryTestMethod(" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="[TestMethod]" value="" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="DriverUtil.GetUrl(sm.Driver" value="base.SetUp(); DriverUtil.GetUrl(sm.Driver" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4Repeated.cs" token="public virtual void SetUp()" value="public override void SetUp()" />

    <replace file="SelemaTest/Translated/Test4giis.Selema.Mstest2/TestLifecycle4WithoutManager.cs" token="SelemaException e" value="SelemaException" />
    <replace file="SelemaTest/Translated/Test4giis.Selema.Nunit3/TestLifecycle4WithoutManager.cs" token="SelemaException e" value="SelemaException" />
  </target>

</project>