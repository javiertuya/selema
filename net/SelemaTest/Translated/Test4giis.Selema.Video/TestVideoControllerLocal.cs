using NUnit.Framework;

using NLog;
using Giis.Portable.Util;
using Giis.Selema.Portable.Selenium;
using Giis.Selema.Services;
using Giis.Selema.Services.Impl;
using Test4giis.Selema.Portable;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
/////// THIS FILE HAS BEEN AUTOMATICALLY CONVERTED FROM THE JAVA SOURCES. DO NOT EDIT ///////

namespace Test4giis.Selema.Video
{
    /// <summary>
    /// Partially integrated test of a Video Controller (local).
    /// 
    /// Tests are integrated with docker and do not need any external sever,
    /// but mock the video recorder using a lightweight
    /// container. To be run in an independent workflow to run in CI.
    /// 
    /// This test does not requires a previous external setup (container is created in the code):
    /// - Files to create the mock container are in video-controller/vcmock
    /// - Folder were the mock video is created is video-controller/target/vcmock-mapped
    /// - Folder were the mock video is copied is video-controller/target/vcmock-target
    /// </summary>
    public class TestVideoControllerLocal
    {
        static readonly Logger log = LogManager.GetCurrentClassLogger(); //TestVideoControllerLocal));
        protected static readonly string MOCK_CONTAINER = "selenium-video-mock";
        protected static readonly string MOCK_IMAGE = "selenium-video-mock-image";
        protected static readonly string ROOT = Parameters.GetProjectRoot(); // for .NET compatibility
        protected static readonly string REPORTS = FileUtil.GetPath(ROOT, Parameters.GetReportSubdir());
        // note that the build context is platform independent, located in the java project
        protected static readonly string DOCKER_BUILD_CONTEXT = FileUtil.GetPath(ROOT, "..", "video-controller/vcmock");
        // definitions of where the videos are stored, different setup for this and the subclasses
        protected string mappedFolder;
        protected string recordedVideo;
        protected string targetFolder;
        
        [NUnit.Framework.OneTimeSetUp]
        public static void SetUpAll()
        {
            log.Debug("****** Building the mock video recorder docker image ******");
            string buildCommand = "docker build -t " + MOCK_IMAGE + " " + DOCKER_BUILD_CONTEXT;
            System.Console.WriteLine(buildCommand);
            Run(buildCommand);
        }

        [NUnit.Framework.SetUp]
        public virtual void SetUp()
        {
            log.Info("****** Running test: {} ******", NUnit.Framework.TestContext.CurrentContext.Test.Name);
            FileSystemSetup();

            // Ensures a clean environment for both container and video files and folders
            Run("docker stop " + MOCK_CONTAINER);
            Run("docker rm " + MOCK_CONTAINER);
            FileUtil.CreateDirectory(FileUtil.GetPath(REPORTS, "selema")); // just to do avoid report failures in GHA
            FileUtil.CreateDirectory(mappedFolder);
            FileUtil.CreateDirectory(targetFolder);
            FileUtil.DeleteFilesInDirectory(mappedFolder);
            FileUtil.DeleteFilesInDirectory(targetFolder);
            log.Info("Test setup done");
        }

        protected virtual void FileSystemSetup()
        {
            mappedFolder = FileUtil.GetPath(ROOT, "..", "video-controller/target/vcmock-mapped");
            recordedVideo = mappedFolder + "/mock.mp4";
            targetFolder = FileUtil.GetPath(ROOT, "..", "video-controller/target/vcmock-target");
        }

        protected virtual IVideoController GetController()
        {
            return new VideoControllerLocal(MOCK_CONTAINER, recordedVideo, targetFolder);
        }

        protected static void Run(string command)
        {
            string output = CommandLine.RunCommand(command);
            System.Console.WriteLine(output.Trim());
        }

        // This mocks what the external script will do to preload the containers, with some additional verification
        protected virtual void PreloadRecorder(bool stopAfterRun)
        {
            string mappedVolume = FileUtil.GetFullPath(mappedFolder);
            mappedVolume = mappedVolume.Replace("\\", "/").Replace("C:/", "//c/"); // fix for windows
            string runCommand = "docker run -d --name " + MOCK_CONTAINER + " -v " + mappedVolume + ":/app/videos " + MOCK_IMAGE;
            System.Console.WriteLine(runCommand);
            Run(runCommand);
            ContainerUtil.WaitDocker(MOCK_CONTAINER, "Display", "is open", 5);
            Asserts.AssertIsTrue(CommandLine.FileExists(recordedVideo), "Video file generated by the mock container after preload does not exist");
            if (stopAfterRun)
            {
                ContainerUtil.RunDocker("stop", MOCK_CONTAINER);
                ContainerUtil.WaitDocker(MOCK_CONTAINER, "Shutdown complete", "", 5);
            }
        }

        [Test]
        public virtual void TestPassRegularLifeCycle()
        {

            // Preload creates a video, but in the regular lifecycle, the recorded video should have been deleted after copy
            PreloadRecorder(true);
            CommandLine.FileDelete(recordedVideo, true);
            Asserts.AssertIsTrue(!CommandLine.FileExists(recordedVideo), "Video file generated by the mock should have been deleted by this test");
            DoTestLifeCycle();
        }

        [Test]
        public virtual void TestPassWhenPreviousRunDidNotDeleteVideo()
        {

            // This is the situation just after preload
            PreloadRecorder(true);
            DoTestLifeCycle();
        }

        [Test]
        public virtual void TestPassWhenPreviousRunDidNotStopRecorder()
        {

            // To simulate that the previous run did not stop the container, do preload without stopping container
            PreloadRecorder(false);

            // When we start a container that is started, there is no action, therefore no new video is created.
            // To simulate this situation, we delete now the video:
            // If the controller does not restart the container in this situation, no new video will be created
            // at the start will fail because video is not present during lifecycle
            CommandLine.FileDelete(recordedVideo, true);
            Asserts.AssertIsTrue(!CommandLine.FileExists(recordedVideo), "Video file generated by the mock should have been deleted by this test");
            DoTestLifeCycle();
        }

        protected virtual void DoTestLifeCycle()
        {
            IVideoController vc = GetController();
            vc.Start();
            Asserts.AssertIsTrue(CommandLine.FileExists(recordedVideo), "Video file should be present during the lifecycle");
            vc.Stop("copied-video.mp4");

            // The video should have been copied to target and removed from the mapped volume, and the container stopped
            Asserts.AssertIsTrue(!CommandLine.FileExists(recordedVideo), "Video file generated by the mock container should have been removed");
            Asserts.AssertIsTrue(CommandLine.FileExists(targetFolder + "/copied-video.mp4"), "Video file to be copied to the target folder does not exist");
            NUnit.Framework.Legacy.ClassicAssert.AreEqual("exited", ContainerUtil.GetContainerStatus(MOCK_CONTAINER));
        }

        [Test]
        public virtual void TestFailOnStartBecauseRecorderDoesNotExist()
        {

            // Do not preload, so that the containers are missing
            Exception e = NUnit.Framework.Assert.Throws(typeof(VideoControllerException), () =>
            {
                IVideoController vc = GetController();
                vc.Start();
            });
            Asserts.AssertContains("No such container", e.Message);
        }

        [Test]
        public virtual void TestFailOnStopBecauseCanNotCopyVideo()
        {

            // This is a common situation when the controller can't access to the recorded video
            // (usually because of file permissions). Simulated by deleting the video before stop
            PreloadRecorder(true);
            IVideoController vc = GetController();
            vc.Start();
            CommandLine.FileDelete(recordedVideo, true);
            Exception e = NUnit.Framework.Assert.Throws(typeof(VideoControllerException), () =>
            {
                vc.Stop("not-copied-video.mp4");
            });
            Asserts.AssertContains("Video file not found after recording", e.Message);
        }

        [Test]
        public virtual void TestFailOnStopBecauseCanNotStopRecorder()
        {

            // Not likely, but the recorder could fail in the middle of the process and be unable to be stopped
            // Simulated by removing the container before stop
            PreloadRecorder(true);
            IVideoController vc = GetController();
            vc.Start();
            Run("docker stop " + MOCK_CONTAINER);
            Run("docker rm " + MOCK_CONTAINER);
            Exception e = NUnit.Framework.Assert.Throws(typeof(VideoControllerException), () =>
            {
                vc.Stop("not-copied-video2.mp4");
            });
            Asserts.AssertContains("No such container", e.Message);
        }

        [Test]
        public virtual void TestContainerNotReadyAfterWaitForLogMessage()
        {

            // To complement the above, check that the waiting for the container log is able to fail after timeout
            Run("docker run -d --name " + MOCK_CONTAINER + " " + MOCK_IMAGE);
            Exception e = NUnit.Framework.Assert.Throws(typeof(VideoControllerException), () =>
            {
                ContainerUtil.WaitDocker(MOCK_CONTAINER, "Other docker log message", "that is not present", 1);
            });
            Asserts.AssertContains("Container did not become ready in time", e.Message);
        }
    }
}